{
	"Lazy load of image": {
	"prefix": "imagelazyload",
	 	"body": [
	 		"console.log('$1');",
	 		"$2"
	 	],
	 	"description": "Lazy load of image"
	},
	"optimistic update": {
		"prefix": "optimisticupdate",
			 "body": [
				 "import React from 'react'",
				 "$2",
				 "type LikeApiResponse = {",
				 "success: boolean",
				 "totalLikes: number",
				 "}",
				 "$2",
				 "let likes = 0 // from db",
				 "$2",
				 "const mockLikeApi = () => {",
				 "$2",
				 "}",
				 "$2",
				 "const ReactQueryLikeCounter: React.FC = () => {",
				 "const queryClient = useQueryClient()",
				 "$2",
				 "const { data: dbLikes } = useQuery({",
				 "queryKey: ['likes'],",
				 "queryFn: () => likes,",
				 "})",
				 "$2",
				 "const { mutate, isLoading } = useMutetion({",
				 "mutationFn: async () => {",
				 "const response = await mockLikeApi()",
				 "return response as LikeApiResponse",
				 "},",
				 "onMutate: async () => {",
				 "await queryClient.cancelQueries(['likes'])",
				 "$2",
				 "const previousLikes = queryClient.getQueryData<number>(['likes'])",
				 "$2",
				 "queryClient.setQueryData(['likes'], (previousLikes || 0) +1 )",
				 "$2",
				 "return { previousLikes }",
				 "},",
				 "onError : (_, __, context) => {",
				 "queryClient.setQueryData(['likes'], () => context?.previousLikes)",
				 "},",
				 "onSettled: () => {",
				 "queryClient.invalidateQueries(['likes'])",
				 "},",
				 "$2",
				 "})",
				 "$2",
				 "return (",
				 "<div>",
				 "<p>Likes: {dbLikes}</p>",
				 "<button onClick={handleLickClick} disabled={isLoading}>{isLoading ? "Updating..." : "Like"}</button>",
				 "</div>",
				 ")",
				 "}",
			 ],
			 "description": "optimistic update" 
	}
}